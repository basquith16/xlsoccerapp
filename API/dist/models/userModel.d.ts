export default User;
declare const User: mongoose.Model<{
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
}, {}> & {
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
} & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, {
    toJSON: {
        virtuals: true;
    };
    toObject: {
        virtuals: true;
    };
}, {
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
}>, {}> & mongoose.FlatRecord<{
    name: string;
    email: string;
    assignedSessions: any[];
    photo: string;
    role: "user" | "coach" | "admin";
    password: string;
    passwordConfirm: string;
    passwordChangedAt: NativeDate;
    waiverSigned: boolean;
    joinedDate: NativeDate;
    fees: mongoose.Types.DocumentArray<{
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }> & {
        prototype?: {
            toString?: {};
            toLocaleString?: {};
            valueOf?: {};
            constructor?: {
                [Symbol.hasInstance]?: {};
                prototype?: unknown;
                name?: unknown;
                length?: unknown;
                toString?: {};
                apply?: {};
                call?: {};
                bind?: {};
                arguments?: unknown;
                caller?: /*elided*/ any;
            };
            hasOwnProperty?: {};
            isPrototypeOf?: {};
            propertyIsEnumerable?: {};
        };
        entries?: {};
        keys?: {};
        values?: {};
        getPrototypeOf?: {};
        getOwnPropertyDescriptor?: {};
        getOwnPropertyNames?: {};
        create?: {};
        defineProperty?: {};
        defineProperties?: {};
        seal?: {};
        freeze?: {};
        preventExtensions?: {};
        isSealed?: {};
        isFrozen?: {};
        isExtensible?: {};
        assign?: {};
        getOwnPropertySymbols?: {};
        is?: {};
        setPrototypeOf?: {};
        getOwnPropertyDescriptors?: {};
        fromEntries?: {};
        hasOwn?: {};
    }>;
    active: boolean;
    passwordResetToken?: string;
    passwordResetExpires?: NativeDate;
    club?: string;
    players?: mongoose.Types.ObjectId;
}> & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}>>;
import mongoose from 'mongoose';
//# sourceMappingURL=userModel.d.ts.map
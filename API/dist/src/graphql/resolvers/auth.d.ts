export declare const authResolvers: {
    signup: (_: any, { input }: {
        input: {
            name: string;
            email: string;
            password: string;
            passwordConfirm: string;
        };
    }) => Promise<{
        status: string;
        token: string;
        data: any;
        errors: {
            message: string;
            code: string;
            field: string;
        }[];
    } | {
        status: string;
        token: never;
        data: import("mongoose").Document<unknown, {}, {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        }, {}> & {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        } & {
            _id: import("mongoose").Types.ObjectId;
        } & {
            __v: number;
        };
        errors: any[];
    }>;
    login: (_: any, { input }: {
        input: {
            email: string;
            password: string;
        };
    }) => Promise<{
        status: string;
        token: string;
        data: any;
        errors: {
            message: string;
            code: string;
            field: string;
        }[];
    } | {
        status: string;
        token: never;
        data: import("mongoose").Document<unknown, {}, {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        }, {}> & {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        } & {
            _id: import("mongoose").Types.ObjectId;
        } & {
            __v: number;
        };
        errors: any[];
    }>;
    logout: () => string;
    forgotPassword: (_: any, { email }: {
        email: string;
    }) => Promise<{
        status: string;
        message: string;
        errors: {
            message: string;
            code: string;
            field: string;
        }[];
    }>;
    resetPassword: (_: any, { token, password, passwordConfirm }: {
        token: string;
        password: string;
        passwordConfirm: string;
    }) => Promise<{
        status: string;
        token: string;
        data: any;
        errors: {
            message: string;
            code: string;
            field: string;
        }[];
    } | {
        status: string;
        token: never;
        data: import("mongoose").Document<unknown, {}, {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        }, {}> & {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        } & {
            _id: import("mongoose").Types.ObjectId;
        } & {
            __v: number;
        };
        errors: any[];
    }>;
    updatePassword: (_: any, { currentPassword, newPassword, newPasswordConfirm }: {
        currentPassword: string;
        newPassword: string;
        newPasswordConfirm: string;
    }, { user }: any) => Promise<{
        status: string;
        token: never;
        data: import("mongoose").Document<unknown, {}, {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        }, {}> & {
            name: string;
            email: string;
            assignedSessions: any[];
            photo: string;
            role: "user" | "coach" | "admin";
            password: string;
            passwordConfirm: string;
            passwordChangedAt: NativeDate;
            waiverSigned: boolean;
            joinedDate: NativeDate;
            fees: import("mongoose").Types.DocumentArray<{
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }, import("mongoose").Types.Subdocument<import("mongoose").Types.ObjectId, any, {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }> & {
                prototype?: {
                    toString?: {};
                    toLocaleString?: {};
                    valueOf?: {};
                    constructor?: {
                        [Symbol.hasInstance]?: {};
                        prototype?: unknown;
                        name?: unknown;
                        length?: unknown;
                        toString?: {};
                        apply?: {};
                        call?: {};
                        bind?: {};
                        arguments?: unknown;
                        caller?: /*elided*/ any;
                    };
                    hasOwnProperty?: {};
                    isPrototypeOf?: {};
                    propertyIsEnumerable?: {};
                };
                entries?: {};
                keys?: {};
                values?: {};
                getPrototypeOf?: {};
                getOwnPropertyDescriptor?: {};
                getOwnPropertyNames?: {};
                create?: {};
                defineProperty?: {};
                defineProperties?: {};
                seal?: {};
                freeze?: {};
                preventExtensions?: {};
                isSealed?: {};
                isFrozen?: {};
                isExtensible?: {};
                assign?: {};
                getOwnPropertySymbols?: {};
                is?: {};
                setPrototypeOf?: {};
                getOwnPropertyDescriptors?: {};
                fromEntries?: {};
                hasOwn?: {};
            }>;
            active: boolean;
            passwordResetToken?: string;
            passwordResetExpires?: NativeDate;
            club?: string;
            players?: import("mongoose").Types.ObjectId;
        } & {
            _id: import("mongoose").Types.ObjectId;
        } & {
            __v: number;
        };
        errors: any[];
    }>;
};
//# sourceMappingURL=auth.d.ts.map